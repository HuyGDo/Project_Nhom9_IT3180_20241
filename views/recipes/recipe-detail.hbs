<script>
    window.isAuthenticated = {{#if user}}true{{else}}false{{/if}};
</script>

<main class="container recipe-detail">
    <div class="row">
        <div class="col-md-8">
            <h1 class="recipe-detail__heading">
                {{ recipe.title }}
            </h1>

            {{!-- Add voting buttons --}}
            <div class="vote-container" data-recipe-id="{{recipe._id}}">
                <button class="vote-btn upvote-btn {{#if recipe.userVoted.up}}voted{{/if}}" data-vote="up">
                    <img src="/assets/icons/thumbs-up.svg" alt="upvote">
                    <span class="upvote-count">{{recipe.votes.upvotes}}</span>
                </button>
                <button class="vote-btn downvote-btn {{#if recipe.userVoted.down}}voted{{/if}}" data-vote="down">
                    <img src="/assets/icons/thumbs-down.svg" alt="downvote">
                    <span class="downvote-count">{{recipe.votes.downvotes}}</span>
                </button>
            </div>
            <img src="./assets/img/recipes/spaghetti-bolognese.jpg" alt="" />
            {{!-- Include image and recipe description --}}
            {{#if recipe.image}}
                <img src="{{recipe.image}}" alt="{{recipe.title}}" class="recipe-image">
            {{/if}}

            <div class="recipe-description">
                <p>{{ recipe.description }}</p>
            </div>

            <div class="recipe-ingredients">
                <h2>Ingredients</h2>
                <ul>
                    {{#each recipe.ingredients}}
                        <li>{{this.name}} - {{this.quantity}}</li>
                    {{/each}}
                </ul>
            </div>

            <div class="recipe-instructions">
                <h2>Instructions</h2>
                <ol>
                    {{#each recipe.instructions}}
                        <li>{{this.description}}</li>
                    {{/each}}
                </ol>
            </div>
        </div>
        <div class="col-md-4">
            {{#if recommendations.length}}
                <div class="recommendations mt-5">
                    <h3>You may also like:</h3>
                    {{#each recommendations}}
                        <div class="recommendation-card">
                            <div class="recommendation-title" data-bs-toggle="modal" data-bs-target="#recipeModal{{@index}}">
                                {{title}}
                            </div>
                            <div class="recommendation-stats">
                                <span class="upvotes">
                                    <img src="/assets/icons/thumbs-up.svg" alt="upvote" width="16">
                                    {{votes.upvotes}}
                                </span>
                                <span class="downvotes">
                                    <img src="/assets/icons/thumbs-down.svg" alt="downvote" width="16">
                                    {{votes.downvotes}}
                                </span>
                                <span class="score">Score: {{votes.score}}</span>
                            </div>
                        </div>

                        {{!-- Modal for each recipe --}}
                        <div class="modal fade" id="recipeModal{{@index}}" tabindex="-1">
                            <div class="modal-dialog modal-lg">
                                <div class="modal-content">
                                    <div class="modal-header">
                                        <h5 class="modal-title">{{title}}</h5>
                                        <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                                    </div>
                                    <div class="modal-body">
                                        {{#if image}}
                                            <img src="{{image}}" class="modal-recipe-img" alt="{{title}}">
                                        {{/if}}
                                        <div class="mt-3">
                                            <a href="/recipes/{{slug}}" class="btn btn-primary">View Full Recipe</a>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    {{/each}}
                </div>
            {{/if}}
        </div>
    </div>
</main>

{{!-- Add voting script --}}
<script>
document.addEventListener('DOMContentLoaded', function() {
    const voteContainer = document.querySelector('.vote-container');
    if (!voteContainer) return;

    const recipeId = voteContainer.dataset.recipeId;
    const voteButtons = voteContainer.querySelectorAll('.vote-btn');
    let isVoting = false;

    voteButtons.forEach(button => {
        button.addEventListener('click', async function(e) {
            e.preventDefault();
            
            if (!window.isAuthenticated) {
                alert('Please login to vote');
                window.location.href = '/sign-in';
                return;
            }

            if (isVoting) return;
            
            const voteType = this.dataset.vote;
            isVoting = true;
            this.classList.add('loading');

            try {
                const response = await fetch(`/recipes/${recipeId}/vote`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ voteType })
                });

                const data = await response.json();

                if (data.success) {
                    voteContainer.querySelector('.upvote-count').textContent = data.upvotes;
                    voteContainer.querySelector('.downvote-count').textContent = data.downvotes;

                    voteButtons.forEach(btn => btn.classList.remove('voted'));
                    if (data.userVoted.up) {
                        voteContainer.querySelector('.upvote-btn').classList.add('voted');
                    }
                    if (data.userVoted.down) {
                        voteContainer.querySelector('.downvote-btn').classList.add('voted');
                    }
                } else {
                    alert(data.message || 'Error voting');
                }
            } catch (error) {
                console.error('Vote error:', error);
                alert('Error submitting vote');
            } finally {
                isVoting = false;
                this.classList.remove('loading');
            }
        });
    });
});
</script>

{{!-- Add voting styles --}}
<style>
.vote-container {
    display: flex;
    gap: 1rem;
    margin: 1rem 0;
}

.vote-btn {
    padding: 0.5rem 1rem;
    border: 1px solid #ddd;
    border-radius: 4px;
    background: white;
    cursor: pointer;
    transition: all 0.2s;
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.vote-btn:hover {
    background: #f0f0f0;
}

.vote-btn.voted {
    background: #e0e0e0;
    border-color: #999;
}

.upvote-btn.voted {
    color: #2ecc71;
}

.downvote-btn.voted {
    color: #e74c3c;
}

.vote-btn.loading {
    opacity: 0.7;
    cursor: not-allowed;
    pointer-events: none;
}
</style>
